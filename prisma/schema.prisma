generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id    String @id @default(cuid())
  name  String @unique
  users User[]
}

model User {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  name          String?
  email         String?    @unique
  emailVerified DateTime?
  password      String
  image         String?
  roleId        String?
  role          Role?      @relation(fields: [roleId], references: [id])
  sessions      Session[]
  Customer      Customer[]
  Employee      Employee[]
  Cart          Cart?
}

model Product {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  serialNumer        String           @default("XXXX-XXXX-XXXX-XXXX")
  boughtAt           DateTime         @default(now())
  warrantyExpiration DateTime?
  warranty           String?
  ProductStatus      ProductStatus?   @relation(fields: [productStatusId], references: [id], onUpdate: Cascade)
  productStatusId    String?
  Model              Model?           @relation(fields: [modelId], references: [id])
  modelId            String?
  Maintenance        Maintenance[]
  Order              Order?           @relation(fields: [orderId], references: [id])
  orderId            String?
  ProductHistory     ProductHistory[]
}

model ProductHistory {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
  Order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
}

model Maintenance {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  description         String
  price               Decimal
  start               DateTime?
  estimatedTime       Int                  @default(0)
  Product             Product?             @relation(fields: [productId], references: [id])
  productId           String?
  maintenanceStatus   MaintenanceStatus?   @relation(fields: [maintenanceStatusId], references: [id], onUpdate: Cascade)
  maintenanceStatusId String?
  MaintenanceDetails  MaintenanceDetails[]
}

model MaintenanceDetails {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  description   String
  price         Decimal
  Maintenance   Maintenance? @relation(fields: [maintenanceId], references: [id])
  maintenanceId String?
}

model MaintenanceStatus {
  id              String        @id @default(cuid())
  name            String        @unique
  visibleOnCreate Boolean       @default(true)
  maintenances    Maintenance[]
}

model ProductStatus {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Model {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  name         String         @default("Product")
  price        Int            @default(0)
  img          String         @default("")
  description  String         @default("Descripton")
  categoryId   String?
  isActive     Boolean        @default(true)
  category     Category?      @relation(fields: [categoryId], references: [id])
  Analytics    Analytics[]
  Products     Product[]
  ModelDetails ModelDetails[]
  CartItem     CartItem[]
}

model ModelDetails {
  id      String  @id @default(cuid())
  name    String
  value   String
  Model   Model?  @relation(fields: [modelId], references: [id])
  modelId String?
}

model Category {
  id          String  @id @default(cuid())
  name        String  @default("Category")
  description String  @default("Description")
  products    Model[]
}

model Order {
  id             String           @id @default(cuid())
  number         Int              @unique
  contractorId   String
  statusId       String
  price          Decimal
  createdAt      DateTime         @default(now())
  rentStart      DateTime?
  rentEnd        DateTime?
  payment        Payment?
  rentDays       Int              @default(0)
  status         OrderStatus      @relation(fields: [statusId], references: [id])
  customer       Customer         @relation(fields: [contractorId], references: [id])
  products       Product[]
  ProductHistory ProductHistory[]
}

model OrderStatus {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  orders    Order[]
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  phone     String?
  lastOrder DateTime?
  createdAt DateTime  @default(now())
  adressId  String
  adress    Adress    @relation(fields: [adressId], references: [id])
  Orders    Order[]
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?
}

model Adress {
  id         String     @id @default(cuid())
  street     String
  building   String
  unit       String?
  city       String
  zip        String
  createdAt  DateTime   @default(now())
  contractor Customer[]
}

model Raports {
  id        String   @id @default(cuid())
  createdAt DateTime
}

model Analytics {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  ip      String
  model   Model  @relation(fields: [modelId], references: [id])
  modelId String
}

model Cart {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  User      User?      @relation(fields: [userId], references: [id])
  userId    String?    @unique
  CartItem  CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Model    @relation(fields: [productId], references: [id])
}

model Payment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  price     Decimal

  Order           Order          @relation(fields: [orderId], references: [id])
  orderId         String         @unique
  PaymentStatus   PaymentStatus? @relation(fields: [paymentStatusId], references: [id])
  paymentStatusId String?
}

model PaymentStatus {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  payments  Payment[]
}

model Settings {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String
  value     String
}

model Email {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now())
  email           String
  message         String
  EmailTemplate   EmailTemplate? @relation(fields: [emailTemplateId], references: [id])
  emailTemplateId String?
}

model EmailTemplate {
  id                     String                  @id @default(cuid())
  createdAt              DateTime                @default(now())
  name                   String
  subject                String
  message                String
  Emails                 Email[]
  EmailTemplateVariables EmailTemplateVariable[]
}

model EmailTemplateVariable {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now())
  name            String
  value           String
  EmailTemplate   EmailTemplate? @relation(fields: [emailTemplateId], references: [id])
  emailTemplateId String?
}

model EmailTemplateVariableType {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String
  value     String
}

model Kanban {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  name      String
  columns   KanbanColumn[]
}

model KanbanColumn {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  name      String
  kanbanId  String
  kanban    Kanban       @relation(fields: [kanbanId], references: [id])
  tasks     KanbanTask[]
}

model KanbanTask {
  id                        String                      @id @default(cuid())
  createdAt                 DateTime                    @default(now())
  name                      String
  columnId                  String
  column                    KanbanColumn                @relation(fields: [columnId], references: [id])
  KanbanTaskComment         KanbanTaskComment[]
  KanbanTaskAttachment      KanbanTaskAttachment[]
  KanbanTaskLabel           KanbanTaskLabel[]
  KanbanTaskChecklist       KanbanTaskChecklist[]
  KanbanTaskAttachmentLabel KanbanTaskAttachmentLabel[]
  Employee                  Employee[]
}

model KanbanTaskComment {
  id                          String                        @id @default(cuid())
  createdAt                   DateTime                      @default(now())
  name                        String
  Employee                    Employee?                     @relation(fields: [employeeId], references: [id])
  employeeId                  String?
  taskId                      String
  task                        KanbanTask                    @relation(fields: [taskId], references: [id])
  KanbanTaskCommentAttachment KanbanTaskCommentAttachment[]
  KanbanTaskCommentLabel      KanbanTaskCommentLabel[]
}

model KanbanTaskAttachment {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  name      String
  taskId    String
  task      KanbanTask @relation(fields: [taskId], references: [id])
}

model KanbanTaskLabel {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  name      String
  taskId    String
  task      KanbanTask @relation(fields: [taskId], references: [id])
}

model KanbanTaskChecklist {
  id                      String                    @id @default(cuid())
  createdAt               DateTime                  @default(now())
  name                    String
  taskId                  String
  task                    KanbanTask                @relation(fields: [taskId], references: [id])
  KanbanTaskChecklistItem KanbanTaskChecklistItem[]
}

model KanbanTaskChecklistItem {
  id                                String                              @id @default(cuid())
  createdAt                         DateTime                            @default(now())
  name                              String
  checked                           Boolean                             @default(false)
  taskId                            String
  task                              KanbanTaskChecklist                 @relation(fields: [taskId], references: [id])
  KanbanTaskChecklistItemComment    KanbanTaskChecklistItemComment[]
  KanbanTaskChecklistItemAttachment KanbanTaskChecklistItemAttachment[]
  KanbanTaskChecklistItemLabel      KanbanTaskChecklistItemLabel[]
}

model KanbanTaskChecklistItemComment {
  id        String                  @id @default(cuid())
  createdAt DateTime                @default(now())
  name      String
  taskId    String
  task      KanbanTaskChecklistItem @relation(fields: [taskId], references: [id])
}

model KanbanTaskChecklistItemAttachment {
  id        String                  @id @default(cuid())
  createdAt DateTime                @default(now())
  name      String
  taskId    String
  task      KanbanTaskChecklistItem @relation(fields: [taskId], references: [id])
}

model KanbanTaskChecklistItemLabel {
  id        String                  @id @default(cuid())
  createdAt DateTime                @default(now())
  name      String
  taskId    String
  task      KanbanTaskChecklistItem @relation(fields: [taskId], references: [id])
}

model KanbanTaskCommentAttachment {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  name      String
  taskId    String
  task      KanbanTaskComment @relation(fields: [taskId], references: [id])
}

model KanbanTaskCommentLabel {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  name      String
  taskId    String
  task      KanbanTaskComment @relation(fields: [taskId], references: [id])
}

model KanbanTaskAttachmentLabel {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  name      String
  taskId    String
  task      KanbanTask @relation(fields: [taskId], references: [id])
}

model Employee {
  id                String              @id @default(cuid())
  createdAt         DateTime            @default(now())
  name              String
  email             String
  phone             String
  address           String
  city              String
  zip               String
  country           String
  status            String
  role              EmployeeRole        @relation(fields: [roleId], references: [id])
  roleId            String
  avatar            String?
  Position          Position?           @relation(fields: [positionId], references: [id])
  positionId        String?
  Salary            Salary[]
  bonus             String?
  AbsenceTracking   AbsenceTracking[]
  TimeOffRequest    TimeOffRequest[]
  KanbanTaskComment KanbanTaskComment[]
  User              User?               @relation(fields: [userId], references: [id])
  userId            String?
  KanbanTask        KanbanTask[]
}

model EmployeeRole {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  name      String
  status    String
  Employee  Employee[]
}

model Position {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  name      String
  status    String
  Employee  Employee[]
}

model Salary {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  basic     Int
  bonus     Int
  taxes     Int

  payDate        DateTime
  Employee       Employee      @relation(fields: [employeeId], references: [id])
  employeeId     String
  Currency       Currency?     @relation(fields: [currencyId], references: [id])
  currencyId     String?
  SalaryStatus   SalaryStatus? @relation(fields: [salaryStatusId], references: [id])
  salaryStatusId String?
}

model Currency {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String
  status    String
  Salary    Salary[]
}

model SalaryStatus {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String
  status    String
  Salary    Salary[]
}

model TimeOffRequest {
  id              String         @id @default(cuid())
  createdAt       DateTime       @default(now())
  Employee        Employee       @relation(fields: [employeeId], references: [id])
  employeeId      String
  start           DateTime
  end             DateTime
  reason          String
  RequestStatus   RequestStatus? @relation(fields: [requestStatusId], references: [id])
  requestStatusId String?
}

model RequestStatus {
  id             String           @id @default(cuid())
  createdAt      DateTime         @default(now())
  name           String
  status         String
  TimeOffRequest TimeOffRequest[]
}

model AbsenceTracking {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  Employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String
  date       DateTime
}

model PageType {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String
  Page      Page[]
}

model Page {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  name        String
  PageType    PageType      @relation(fields: [pageTypeId], references: [id])
  pageTypeId  String
  href        String
  title       String
  PageSection PageSection[]
}

model Links {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String
  href      String
}

model Navigation {
  id               String          @id @default(cuid())
  createdAt        DateTime        @default(now())
  name             String
  href             String
  iconPath         String
  NavigationType   NavigationType? @relation(fields: [navigationTypeId], references: [id])
  navigationTypeId String?
}

model NavigationType {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  name       String
  Navigation Navigation[]
}

model Information {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String
  value     String
}

model PageSection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String
  value     String
  iconPath  String?
  Page      Page     @relation(fields: [pageId], references: [id])
  pageId    String
}
